*정적 메소드의 유의사항
- 객체와 관련된 인스턴스 변수를 사용할 수 없음
- 객체와 관련된 인스턴스 메소드를 호출할 수 없음
- 객체 자신을 가리키는 this 키워드를 사용할 수 없음

*정적 블록
- 정적 변수의 초기화 과정이 for문이나 오류 처리처럼 복잡하다면 과정이
  그리 간단하지 않을 것이다. 대신에 정적 변수의 초기화가 복잡할 때는 다음과 같이 정적 블록을 사용할 수 있다.

*싱글톤 패턴 

[상속]
- 생성자는 제외하고 물려받음 
- 멤버를 그대로 사용하거나 변경할 수 있고, 새로운 멤버도 추가 가능 
- 상속 관계 : is-a 관계  
- 포함 관계 : has-a 관계 
-> 작은 단위의 클래스를 만들고, 이 들을 조합해서 클래스를 만듦
class Engine{

}

class Car{
// 포함 관게는 extends 하지 않고 class 안에 객체 포함시키기 
 Engine engine; // Car 클래스가 Engine 객체를 포함 

}

- 다중 상속 안됨 
- 단 비중이 높은 클래스 하나만 상속관계로 하고, 나머지는 포함관계로 하면 다중상속을 하는 것처럼 사용 가능 


*패키지
- 클래스 파일을 묶어서 관리하기 위한 수단으로 파일 시스템의 폴더를 이용
- 패키지마다 별도의 이름 공간이 생기기 때문에 클래스 이름의 유일성을 보장 
- java.lang 패키지는 import문을 선언하지 않아도 자동으로 임포트되는 자바의 기본 클래스를 모아둔 것
- java.awt 패키지는 그래픽 프로그래밍에 관련된 클래스를 모아둔 것
- java.io 패키지는 입출력과 관련된 클래스를 모아 둔 것 
- java.util 패키지 Arrays
- 주석문을 제외하고 반드시 첫 라인에 위치
- 패키지 이름은 모두 소문자로 명명하는 것이 관례. 일반적으로 패키지 이름이 중복되지 않도록 회사의
  도메인 이름을 역순으로 사용
- 처음에 배울 때는 import 패키지이름.클래스; -> 클래스 이름 적는 연습 할 것 
- import static java.util.Arrays.sort;
  Array.sort();가 아닌 sort(arr);로 사용가능 정적 멤버도 import 가능 but, 추천하지는 않음


*제어자(자바의정석 참고)
- 클래스, 변수, 메소드의 선언부에 사용되어 부가적인 의미를 부여 
- 제어자는 크게 접근 제어자와 그 외의 제어자로 나뉜다
- 접근 제어자 - public, protected, default, private
- 하나의 대상에 여러 개의 제어자를 조합해서 사용할 수 있으나, 접근제어자는 단 하나만 사용가능
- 그외 : static, final, abstract
- final이 사용할 수 있는 곳 : 클래스, 매소드, 멤버변수, 지역변수 -> 상수에 사용 됨 -> 더이상 수정 불가능
  메서드인 경우 오버라이딩을 통해 재정의 될 수 없음 
  클래스인 경우 확장 될 수 없는 클래스. 그래서 final로 지정된 클래스는 다른 클래스의 조장이 될 수 없음
- final이 붙은변수는 상수이므로 보통은 선언과 초기화를 동시에 하지만, 인스턴스변수의 경우 생성장에서 초기화 할 수 있음
  class Card{
  final int NUMBER;

Card(int num){
   NUMBER =num;
}
- abstract가 사용될 수 있는 곳 : 클래스,메소드 
   클래스 내에 추상매소드가 선언되어 있음
   메서도 선언부만 작성하고 구현부는 작성하지 않은 추상메소드
- 접근제어자 
- private 같은 클래스 내에서만 접근이 가능함
- default 같은 패키지 내에서만 접근이 가능함(아무것도 안주면 default)
- protected 같은 패키지 내에서, 그리고 다른 패키지의 자손클래스에서 접근이 가능
- public>protected>default>private
- 일반적으로 생성자의 접근 제어자는 클래스의 접근 제어자와 일치함
- 메서드에 static과 abstract를 함께 사용할 수 없음 
- 클래스에 abstract와 final동시에 사용할 수 없음
- abstract메서드의 접근제어자가 private일 수 없음
  -> abstarct메소드는 자손클래스에서 구현해주어야 하는데 private로 되어있으면 상속이 안됨?
- 메소드에 private과 final을 같이 사용할 필요가 없음

===================================================
package pack1;

public class Inheritance {

  public static void main(String[] args) {
    Circle c1 = new Circle();
    Ball b1 = new Ball("노랑");

    c1.getArea();
    c1.getRadius(); //protected는 같은 패키지에서 사용 가능
    
    b1.getColor();
    b1.getVolume();

  }
}


package pack1;

public class Circle {

  private void secret() {
    System.out.println("secret");
  }

  protected void getRadius() {
    System.out.println("radius is 10.0");
    secret();//같은클래스 내에서는 사용 가능
  }

  public void getArea() {
    System.out.println("넓이는 3.14*10.0*10.0");
  }
}

package pack1;

public class Ball {

  private String color;

  public Ball(String color) {
    this.color = color;
  }

  public String getColor() {
    return this.color;
  }

  public void getVolume() {
    System.out.println("부피는 4/3*(ㅠ*반지름*반지름*반지르)이다.");
  }

}
===================================================

*메소드 오버라이딩
- 메서드 오버라이딩은 물려받은 메소드를 자식 클래스에게 맞도록 수정하는 것 
- 부모 클래스의 매서드와 동일 한 시그니처를 사용함. 심지어 반환 까지 동일해야 함
- 부모 클래스의 매소드보다 접근 범위를 더 좁게 수정할 수 없다
- 추가적인 예외가 발생할 수 있음을 나타낼 수 없다

오버라이딩 불가
- private메소드 : 부모 클래스 전용이므로 자식 클래스에 상속되지 않음
- 정적 메소드 : 클래스 소속이므로 자식 클래스에 상속되지 않음
- final 메소드 : fianl 메소드는 더 이상 수정할 수 없으므로 자식 클래스가 오버라이딩할 수 없음




ctrl+o -> override 할 수 있는거 확인 가능

- 자식 생성자를 호출하면 부모 생성자도 자동으로 호출 
- 자식 생성자는 첫 행에 부모 생성자 호출 코드가 있음 

- final 클래스 더 이상 상속 될 수 없는 클래스
- 대표적인 final 클래스로는 String 클래스

*다형성
- 여러 가지 형태를 가질 수 있는 능력 
- 하나의 참조변수로 여러 타입의 객체를 참조할 수 있는 것
   즉, 조상타입의 참조변수로 자손타입의 객체를 다룰 수 있는 것이 다형성
   TV, SmartTV 
- 조상타입의 참조변수로 자손타입의 인스턴스를 참조할 수 있지만,
 반대로 자손타입의 참조변수로 조상타입의 인스턴스를 참조할 수 없음 -> 자바의 정석 참고 

* 참조변수의 형변환★
- 자손타입 -> 조상타입 : 형변환 생략가능
  자손타입 <- 조상타입 : 형변환 생략불가 

*instanceof연산자★
- 자바의 정석 참고 



https://backlog.com/git-tutorial/kr/intro/intro1_1.html
- 같은 실행을 하지만 실행 결과가 다르게 나오는 것도 다형성이라고 함 



- 다형성 pack4


[인터페이스와 특수 클래스]
*추상클래스
- 추상 매서드 : abstract 키워드 사용해서 만듦, 선언부만 있고 구현부가 없는 메소드
- 추상 클래스 : 클래스는 설계도, 추상 클래스는 미완도 설계동
   -> 보통 하나 이상의 추상 메소드를 포함하지만 없을 수도 있음 
   -> 추상 클래스는 인스턴스를 생성하지 못함
   -> 예) Animal move라는 추상메소드 만들어서 동물 마다 move에 대한 결과를 다르게 만들기 위해서 
- 추상 메서드 선언 : 꼭 필요하지만 자손마다 다르게 구현될 것으로 예상되는 경우에 사용
      -> 추상클래스를 상속받는 자손클래스에서 추상메소드의 구현부를 완성해야 함 

- 선언부만 있는 추상 메소드 










