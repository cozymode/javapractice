자바교육1일차

==========================================
- JDK 11로 공부할 예정
 인텔리제이에서 프로젝트에서 자바버전을 다르게 깔 수 있음
 (인텔리제이 안에서 깔 수 있음)
- TIOBE
- 자바SE
==========================================

1. 자바의 특징
- JRE 실행환경 
- JDK 개발환경+실행환경
- API라는 수많은 라이브러리가 있음
- 멀티스레드 제공 (채팅 하면서 친구와 파일을 주고 받을 수 있음)
- 플랫폼 독립적 (JVM으로 인해 한번만 작성하면 모든 OS에서 실행가능함) 
- JDK>JRE>JVM
- javac -> 컴파일러, java -> hello.class 실행하는 것
- 환경변수 디렉토리 찾아서 javac를 찾음 


2. 인텔리제이 셋팅 
- file>settings ctrl+alt+s
- appearance : 어떤 환경에서 볼 건지 
- keymap을 Eclipse로 바꾸기(ctrl+,ctrl-)
- main 메소드 없어졌을때 main치거나 psvm 치면 됨
- sout
- 클래스 자동으로 import 하는 방법->setting->fly 입력-> 4개 다 체크 
- 자동 빌드 : setting->compile 입력 -> buile project automatically 체크 
- advanced settings > allow auto-make to start ~~ check
- File Encodings UTF-8로 다 맞추기 , Transparent native-~~~check
- indent>java> tabs and indents> 2,2,4로 변경
- shift 두번 > registry > compiler.automake.postpone~~ 500으로 변경 
- HELP>Edit Custom VM option
- File > Invalidate Caches > 전부 선택 
- setting > plugin
- out 밑에 실행 파일들이 들어감

[단축키]
- 프로젝트 뷰 토글 키 alt+1
- 소스코드 정리 : ctrl+shift + f
- 자동완성 : ctrl + space
- 실행문 완성 : ctrl + shift + enter
- 실행 : ctrl + shift + f10    
- 행주석 : ctrl + /
- 파일검색 : ctrl + shift + r
- ctrl + 1 : 오류 확인 

3. 자바 프로그램 기본 구조
- 파일이름과 class이름은 동일하게
- main 메소드는 필수 public static void main
- 리턴이 없을 때는 void, 있을 때는 리턴 타입에 맞게 적어줘야 함
- String[] args가 없어도 실행은 됨 
- 두개 단어 합해질 때 camel 표기법을 많이 활용함
- 변수와 메소드는 모두 소문자로 표기
- 클래스와 인터페이스는 첫 자만 대문자로 표기
- 상수는 전체를 대문자로 표기 (복합어일 경우 _언더바 사용)

4. 데이터 타입
- 기본형 8개(char,int,byte,long,short,double,float,boolean)은 실제 값을 저장
- 참조형은 메모리 주소를 저장 (배열 타입, 열거 타입, 클래스 타입, 인터페이스 타입)
- float는 지수부랑 가수부를 나눠서 저장  
- 1바이트 8비트 

5. 변수
- 변수는 프로그램내에서 변할수 있는 식별자, 상수는 프로그램내에서 변경 불가능 
- 상수는 final이라는 키워드를 붙여줌
- int fifteen = 15 ; 15를 리터럴? 
- 리터럴 : 프로그램 내부에서 값을 정의해 변수를 초기화 할 수 있는데, 그 값을 리터럴
- 접두사 : 0x(16진수), 0(8진수), 0b(2진수), 그냥(10진수)
- 접미사 : 3000L,3.14159F 
- 자바 컴파일러는 문자열 + 숫자 되어있을 때 숫자를 자동으로 문자열로 변환해줌 
- 10.0 은 double
- char 문자는 '' 해줘야함. ""로 하면 문자열이므로 오류 발생
- 유니코드 : 0 -> 48, A->65, a->97
   ex) char c = 65; ,char c = 'A'; , char c = '\u0041', char c = "A"; (오류)
=====================================================
 DatatypeDemo
    char a1 = 'A';
    char a2 = 65;
    char a3 = '\u0041';

    System.out.println(a1); //A
    System.out.println(a2); //A
    System.out.println(a3); //A

    System.out.println((int)a1); // 65
    System.out.println((int)a2); //65
    System.out.println((int)a3); //65

    char ga1 = '가';
    char ga2 = '\uac00';

    boolean c = true;
    boolean g = false;


    System.out.println(ga1);  //가
    System.out.println((int)ga1); //44032
    System.out.println(ga2); //가
    System.out.println(++ga2); //각
    System.out.println(c+"가 아니면"+g+"입니다.");
=====================================================
- 자바 10부터 var 예약어 지원 
   -> 초깃값을 통하여 컴파일러가 데이터 타입 추론 가능
   -> 선언만 해주면 안됨(오류). 선언과 초기화 같이 해줘야 함 
- 상수 : 한번만 값을 저장 가능한 변수 -> 반드시 final 키워드로 지정 
          final double PI;
          final int MAX = 100; 100은 리터럴 MAX는 상수
- 지역변수는 반드시 초기화해야함
- 변수와 리터럴의 타입 불일치 
  범위가 변수>리터럴 인 경우 ok
  범위가 변수<리터럴 인 경우 error
  byte,short 변수에 int 리터럴 저장하는 경우 ok(범위내에서)
  -> byte a =100; //ok
  -> byte b = 128 //error
  -> int i = 100;
  -> byte b = i // error 반드시(byte)i로 형변환을 해서 대입 
  -> byte b = 128 // -128~127 범위에 벗어나기 때문에 error
- 형변환 : 변수 또는 상수의 타입을 다른 타입으로 변환하는 것
- 자동 타입 변환 
  -> double d1 = 5 * 3.14 ; // 정수 5를 실수 5.0으로 자동 타입 변환
- 강제 타입 변환 : (타입)피연산자 
=====================================================
TypeDemo

    int i = 'A'; // int(4) > char(2) , 65 -> 컴파일러 자동형변환
    double d = 3.14f; // double(8) > float(4) -> 컴파일러 자동형변환

    //int ie = 10_000_000_000; int범위 20억을 벗어난 오류
    //long l = 3.14f; // long 값의 범위 < float 값의 범위
    //float f = 3.14; // float < double

    byte b = 100;
    //byte be = 128; // -128~127 범위 벗어나면 오류

    int a = 100;
    //byte be = a; // 형변환해서 대입해야함

    byte be = (byte)a;
====================================================
- 문자와 숫자간의 변환
  ->3+'0' = '3' '0'을 추가하면 문자로
  ->'3'-'0' = 3 '0'을 빼면 숫자

- 문자열을 숫자로 변환
  -> Integer.parseInt("3")
  -> Double.parseDouble("3.1")

- 문자열을 문자로 변환 
  "3".charAt(0) '3' 으로 변환 

===================================================
TypeTrans

    int a = 3;
    char c = '3';
    System.out.println(a+'0'); //51
    System.out.println(c-'0'); //3(숫자 3)

    System.out.println(3+""); //3(문자열 3)
    System.out.println('3'+"");//3(문자열 3)

    String s = "3";
    System.out.println(Integer.parseInt(s)); //3 문자열

    String s1 = "3.14";
    System.out.println(Double.parseDouble(s1)); //3.14 문자열

    System.out.println(s.charAt(0)); //3
    System.out.println(s1.charAt(1)); //.
==================================================

- 문자와 문자열
- char c = 'A';
- char c = "A"; //ERROR
- String s = "ABC";
- char c = ''; //Error, 빈 문자는 null로 줘야 함
- String s = ""; // 빈 문자열 
- String s = "" + 7; ==> "" + "7" -> "7"
- ""+7+7 = "77" , 7+7+""= "14"

기본 입출력
- Scanner in = new Scanner(System.in) -> 입력 
- int x = in.nextInt();
- String input = in.nextLine(); 

=================================================
ScannerDemo

    Scanner in = new Scanner(System.in);


    System.out.println("첫번째 값을 입력해주세요.");

    int x = in.nextInt();
    System.out.println("두번째 값을 입력해주세요.");
    int y = in.nextInt();

    System.out.println("첫번쨰 입력한 값은:"+x+"입니다.");
    System.out.println("두번쨰 입력한 값은:"+y+"입니다.");

    System.out.println(x*y);

    System.out.printf("%d 곱하기 %d는 %d 입니다.",x,y,x*y);

    Scanner in = new Scanner(System.in);


    System.out.println("첫번째 값을 입력해주세요.");

    String s1 = in.nextLine();
    System.out.println("두번째 값을 입력해주세요.");
    String s2 = in.nextLine();

    System.out.println("첫번쨰 입력한 값은:" + s1 + "입니다.");
    System.out.println("두번쨰 입력한 값은:" + s2 + "입니다.");

    int i1 = Integer.parseInt(s1);
    int i2 = Integer.parseInt(s2);
    //System.out.println(i1);

    System.out.println(i1 * i2);

    System.out.printf("%d 곱하기 %d는 %d 입니다.", i1, i2, i1 * i2);

=================================================

5. 연산자
- byte b1 = 1;
  byte b2 = 2;
  byte b3 = b1+ b2 ;// 오류 발생 int??
- 산술 연산자
  long + int -> long으로 일치시키기
  float + int -> float로일치
  double + float -> double로 일치
 
  byte + short -> int + int 
  char + short -> int + int 
- 산술 연산자
  5/0.0 -> infinity 
  5%0.0 -> NaN

================================================
ArithmeticDemo

    //int result1 = 5/0;
    //System.out.println(result1); error

    double result2 = 5/0.0;
    System.out.println(result2); // Infinity

    double result3 = 5%0.0;
    System.out.println(result3); //Nan Not a number

    if(Double.isInfinite(result2) || Double.isNaN(result3)){
      System.out.println("산술 연산을 할 수 없습니다.");
    }else{

    }

    int x = 25;
    int y = 2;

    int z = x%y;

    System.out.printf("%d를 %d로 나눈 나머지는 %d입니다.",x,y,z);
================================================

- 전위연산자 vs 후위 연산자
================================================
SignIncrement

    int i = 5;
    int j = 5;
    int x = 5;
    int y = 5;

    int res = i++ * x;
    int res2 = ++j * y;

    System.out.println(res);
    System.out.println(res2);
    System.out.println(i);
    System.out.println(j);
================================================

조건 연산자
- 조건식? 연산식1 : 연산식2
 
===============================================
OperatorDemo

    int x = 1;
    int y;
    y=(x==1) ? 10:20;
    System.out.println(y); // 10

    y=(x>1)?x++:x+20;
    System.out.println(x); // 1
    System.out.println(y); //21
===============================================

Switch
- 모든 if문이 switch문으로 되는건 아님
- switch(변수) 변수에 연산식도 가능
- case문의 값은 정수 상수(문자 포함, 변수 불가능)
case'1', case ONE, case "YES", case num(변수여서 안됨),case 1.0(실수 안됨)
[개선 된 switch문]
- 개선된 switch문에서는 break문을 사용할 수 없음 (자바14부터)
- switch 문장이 값을 리턴할 수 있음 , 값을 리턴할 경우 default 문장이 반드시 있어야함
- 다중 케이스 레이블 가능
- yield 예약어
-> case : 자체가 블록을 내포하고 있음 
===============================================
SwitchDemo

    Scanner sc = new Scanner(System.in);
    String prod = sc.nextLine();

    switch (prod) {
      case "A", "a" -> System.out.println("콜라입니다.");
      case "B", "b" -> System.out.println("사이다입니다.");
      case "C", "c" -> System.out.println("아이시스입니다.");

    }

    String prod_name = switch (prod) {
        case "A", "a" -> "콜라";
        case "B", "b" -> "사이다";
        case "C", "c" -> "아이시스";
        default -> "제품없음";
    };
    System.out.println(prod_name+"입니다.");

===============================================

6. 반복문 
===============================================
    int row = 2;
    while(row < 10){
      int column = 1;
      while(column < 10){
        System.out.printf("%4d",row*column);  // 4자리씩 간격 유지 
        column++;
      }
      System.out.println(""); // 다음라인 부터 시작할 수 있게 
      row++;
    }
===============================================
- break문 반복문 빠져나옴 (내가 속한 반복문 빠져나옴)
- 레이블이 표시된 반복문 종료
out : while(){
while(){
break out;
}
}
- continue -> 조건식으로 감 

7. 메소드 
===============================================
Method1Demo

  public static void main(String[] args) {
    int res = sum(1,10);
    System.out.println("합(1~10):"+res);

    System.out.println("합(10~100):"+sum(10,100));

    System.out.println("합(100~1000):"+sum(100,1000));



  }

  public static int sum(int x, int y) {
    int sum = 0;
    for (int i = x; i <= y; i++) {
      sum += i;
    }
    return sum;

  }

===============================================

- 가비지데이터 자동으로 처리 
- 함수 호출 하고 끝나면 지역 변수 메모리 clear 자동으로 함 
- 메소드 앞에 static으로 설정하면 객체를 또 생성하지 않아도 가능 
  -> 그래서 main함수도 static으로 설정했기 때문에 객체를 생성하지 않고도 사용 가능한 것 
